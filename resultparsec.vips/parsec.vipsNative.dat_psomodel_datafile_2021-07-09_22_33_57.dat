{"config": {"pkg": "parsec.vips", "command": "runprocess.py -p parsec.vips -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "memorWallTest.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_22:33:57", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\ndef calculateMu(p,m1,m2):\n    return min(m1+m2/p, 1)\n\ndef calculateRho(k, phi):\n    return 1 + k*phi\n\n# values [f, m1, m2, k]\ndef _func_speedup(param, freq, cores):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :return: calculated speedup value\n    \"\"\"\n\n    phi = (freq / 1000000) / 2.6\n\n    #(1 − mu) + rho mu\n    up_arg=(1-calculateMu(1,param[1],param[2]))+calculateRho(param[3],phi)*calculateMu(1,param[1],param[2])\n\n    # ((1 − mu_p ) + rho mu_p ) * (1 − f ) + f/p)\n    leftSide = ((1- calculateMu(cores, param[1], param[2])) + calculateRho(param[3], phi)) * ((1-param[0])+ param[0]/cores)\n\n    # rho mu_p\n    rightSide = phi*calculateMu(cores, param[1], param[2])\n\n    #Calculate max btw below args\n    below_arg = max(leftSide, rightSide)\n\n    speedup = up_arg / below_arg\n    return speedup\n\n\ndef model(par, x):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x:\n        y_model = _func_speedup(par, f, p)\n        pred.append(y_model)\n    return {'x': x, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas)\n    # print(\"Y_meas\")\n    # print(y_meas)\n    # print(pred['y'])\n    # print()\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0, 0, 0, 0]", "uppervalues": "[1, 1, 1, 10]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_example_inputsize_cores.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.vipsNative.dat", "verbosity": 1}, "measuresfraction": 64, "measuresfraction_points": [[1000000, 4], [1000000, 6], [1000000, 7], [1100000, 3], [1100000, 4], [1100000, 5], [1100000, 6], [1100000, 7], [1200000, 2], [1200000, 3], [1200000, 5], [1200000, 6], [1300000, 3], [1300000, 4], [1300000, 5], [1300000, 6], [1300000, 8], [1400000, 2], [1400000, 4], [1400000, 7], [1400000, 8], [1500000, 2], [1500000, 3], [1500000, 5], [1500000, 6], [1700000, 3], [1700000, 4], [1700000, 5], [1700000, 7], [1800000, 2], [1800000, 3], [1800000, 5], [1800000, 8], [1900000, 3], [1900000, 4], [1900000, 6], [1900000, 7], [2000000, 3], [2000000, 5], [2000000, 6], [2000000, 8], [2100000, 3], [2100000, 4], [2100000, 5], [2100000, 7], [2200000, 2], [2200000, 5], [2200000, 6], [2200000, 7], [800000, 3], [800000, 4], [800000, 7], [900000, 2], [900000, 5]]}, "data": {"params": "[0.8810800617576136, 0.6667658636331771, 0.9999113732866445, 3.1934743172233424]", "error": 0.05084348315953742, "errorrel": 0.5774373511900635, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.vips", "execdate": "03-07-2021_12:21:39", "command": "runprocess.py -p parsec.vips -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[1.900650469783733, 2.725873754152824, 2.9304817418138183, 3.0127340823970035, 3.463026742301459, 3.61282936452022, 3.6942278253039174], [1.9494822717288987, 2.7182441300860436, 2.9217231453244787, 3.1772663877266387, 3.5348608668666595, 3.709589288945178, 3.708180354849795], [1.9802410704837763, 2.9446550416982564, 3.140764700497391, 3.192741372625049, 3.6651947866961043, 3.7497176582024845, 3.862646126132888], [1.992731211013569, 2.9675878539747527, 3.189851472770008, 3.579423868312757, 3.68950159066808, 3.807094681972823, 3.863748334208294], [1.9876417220845344, 2.955182072829132, 3.088342916884475, 3.5034591816564538, 3.6817615288741172, 3.7965085145121558, 3.868517548454688], [1.9898876810285668, 2.9313683762502656, 3.0686716791979944, 3.3725210152615683, 3.6825290736532543, 3.7866306240263903, 3.8606563120401725], [1.9618803879310347, 2.9551403006878085, 3.3565321595649067, 3.561385920727682, 3.673114266259804, 3.7986073077224, 3.849711899349791], [1.9881578947368423, 2.9558665462831595, 3.2014202561117577, 3.202613313457866, 3.667671379034409, 3.769009374486048, 3.8241461786628097], [1.9891786438249683, 2.9231975272694695, 3.089114535255272, 3.2110222659613727, 3.6388780460603356, 3.778466170637793, 3.8745992162451017], [1.9855580639479962, 2.9676462142241795, 3.079666236217344, 3.5069283411571743, 3.638422720337988, 3.7995036612641315, 3.869812145041503], [1.982716879623403, 2.927006031123576, 3.349769925580867, 3.1968555164001082, 3.6777895590344913, 3.80180528691167, 3.8380577342402447], [2.0000000000000004, 2.96560415900856, 3.094296202947784, 3.5056333219528852, 3.6472487729268925, 3.673344607779368, 3.757918552036199], [1.9222721461873966, 2.7025466175051873, 2.905269289235534, 3.211051094432057, 3.2513315420449307, 3.5860031213284933, 3.712763253449528], [1.9125811119929044, 2.719797655243836, 2.8757317535411957, 3.2440217907705953, 3.486520066718862, 3.702544915591223, 3.752945056153015]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[1.7874379851892042, 2.423576794536158, 2.842012083597306, 3.197080793721817, 3.500971057300263, 3.763586012390708, 3.99262787335382], [1.7874379851892042, 2.4235767945361584, 2.84736987516866, 3.206533163544349, 3.51373965439477, 3.7791271820311882, 4.010535244458019], [1.7874379851892042, 2.423576794536158, 2.852212975577577, 3.215094913082554, 3.5253203561950004, 3.793235436408751, 4.026802525093931], [1.7874379851892042, 2.4235767945361584, 2.8566121507694366, 3.2228862530060565, 3.5358715638802316, 3.8061002170190434, 4.0416451665039155], [1.7874379851892042, 2.4235767945361584, 2.8606257621893962, 3.2300066916421866, 3.5455247142592956, 3.8178789808811286, 4.055242465923564], [1.7874379851892042, 2.423576794536158, 2.86430237064269, 3.2365393076430307, 3.5543897831863944, 3.8287036773095546, 4.067744844821799], [1.7874379851892042, 2.4235767945361584, 2.8708012061820143, 3.2481100315769247, 3.570112572720518, 3.847919795876878, 4.089954427087873], [1.7874379851892042, 2.4235767945361584, 2.873687146849133, 3.253257922904558, 3.5771162937138152, 3.8564869584759984, 4.099862454554947], [1.7874379851892042, 2.423576794536158, 2.876365610989664, 3.2580410581520445, 3.58362848842492, 3.8644569331367644, 4.109083308646565], [1.7874379851892042, 2.4235767945361584, 2.8788581961614463, 3.2624968782971733, 3.589699146221685, 3.8718900587762715, 4.11768608198182], [1.7874379851892042, 2.4235767945361584, 2.881183602811457, 3.2666578695933386, 3.595371700026997, 3.8788388104322613, 4.125730904894148], [1.7874379851892042, 2.4235767945361584, 2.8833581042893104, 3.2705523569223818, 3.6006840670953832, 3.8853490399482693, 4.133270352955715], [1.7874379851892042, 2.4235767945361584, 2.829385215397025, 3.174883785616544, 3.471055520342797, 3.727233002483896, 3.9507894775953956], [1.7874379851892042, 2.4235767945361584, 2.836052949809552, 3.1865912114113786, 3.486821910846798, 3.746381945709329, 3.9728192100186064]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}