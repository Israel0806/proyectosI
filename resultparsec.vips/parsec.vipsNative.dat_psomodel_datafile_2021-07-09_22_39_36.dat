{"config": {"pkg": "parsec.vips", "command": "runprocess.py -p parsec.vips -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "memorWallTest.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_22:39:36", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\ndef calculateMu(p,m1,m2):\n    return min(m1+m2/p, 1)\n\ndef calculateRho(k, phi):\n    return 1 + k*phi\n\n# values [f, m1, m2, k]\ndef _func_speedup(param, freq, cores):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :return: calculated speedup value\n    \"\"\"\n\n    phi = (freq / 1000000) / 2.6\n\n    #(1 − mu) + rho mu\n    up_arg=(1-calculateMu(1,param[1],param[2]))+calculateRho(param[3],phi)*calculateMu(1,param[1],param[2])\n\n    # ((1 − mu_p ) + rho mu_p ) * (1 − f ) + f/p)\n    leftSide = ((1- calculateMu(cores, param[1], param[2])) + calculateRho(param[3], phi)) * ((1-param[0])+ param[0]/cores)\n\n    # rho mu_p\n    rightSide = phi*calculateMu(cores, param[1], param[2])\n\n    #Calculate max btw below args\n    below_arg = max(leftSide, rightSide)\n\n    speedup = up_arg / below_arg\n    return speedup\n\n\ndef model(par, x):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x:\n        y_model = _func_speedup(par, f, p)\n        pred.append(y_model)\n    return {'x': x, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas)\n    # print(\"Y_meas\")\n    # print(y_meas)\n    # print(pred['y'])\n    # print()\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0, 0, 0, 0]", "uppervalues": "[1, 1, 1, 10]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_example_inputsize_cores.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.vipsNative.dat", "verbosity": 1}, "measuresfraction": 64, "measuresfraction_points": [[1000000, 4], [1000000, 6], [1000000, 7], [1100000, 3], [1100000, 4], [1100000, 5], [1100000, 6], [1100000, 7], [1200000, 2], [1200000, 3], [1200000, 5], [1200000, 6], [1300000, 3], [1300000, 4], [1300000, 5], [1300000, 6], [1300000, 8], [1400000, 2], [1400000, 4], [1400000, 7], [1400000, 8], [1500000, 2], [1500000, 3], [1500000, 5], [1500000, 6], [1700000, 3], [1700000, 4], [1700000, 5], [1700000, 7], [1800000, 2], [1800000, 3], [1800000, 5], [1800000, 8], [1900000, 3], [1900000, 4], [1900000, 6], [1900000, 7], [2000000, 3], [2000000, 5], [2000000, 6], [2000000, 8], [2100000, 3], [2100000, 4], [2100000, 5], [2100000, 7], [2200000, 2], [2200000, 5], [2200000, 6], [2200000, 7], [800000, 3], [800000, 4], [800000, 7], [900000, 2], [900000, 5]]}, "data": {"params": "[0.8785426430343525, 0.786688489699978, 0.6396452861135169, 2.026741593449833]", "error": 0.04830637905719449, "errorrel": 0.5713887229844166, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.vips", "execdate": "03-07-2021_12:21:39", "command": "runprocess.py -p parsec.vips -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[1.900650469783733, 2.725873754152824, 2.9304817418138183, 3.0127340823970035, 3.463026742301459, 3.61282936452022, 3.6942278253039174], [1.9494822717288987, 2.7182441300860436, 2.9217231453244787, 3.1772663877266387, 3.5348608668666595, 3.709589288945178, 3.708180354849795], [1.9802410704837763, 2.9446550416982564, 3.140764700497391, 3.192741372625049, 3.6651947866961043, 3.7497176582024845, 3.862646126132888], [1.992731211013569, 2.9675878539747527, 3.189851472770008, 3.579423868312757, 3.68950159066808, 3.807094681972823, 3.863748334208294], [1.9876417220845344, 2.955182072829132, 3.088342916884475, 3.5034591816564538, 3.6817615288741172, 3.7965085145121558, 3.868517548454688], [1.9898876810285668, 2.9313683762502656, 3.0686716791979944, 3.3725210152615683, 3.6825290736532543, 3.7866306240263903, 3.8606563120401725], [1.9618803879310347, 2.9551403006878085, 3.3565321595649067, 3.561385920727682, 3.673114266259804, 3.7986073077224, 3.849711899349791], [1.9881578947368423, 2.9558665462831595, 3.2014202561117577, 3.202613313457866, 3.667671379034409, 3.769009374486048, 3.8241461786628097], [1.9891786438249683, 2.9231975272694695, 3.089114535255272, 3.2110222659613727, 3.6388780460603356, 3.778466170637793, 3.8745992162451017], [1.9855580639479962, 2.9676462142241795, 3.079666236217344, 3.5069283411571743, 3.638422720337988, 3.7995036612641315, 3.869812145041503], [1.982716879623403, 2.927006031123576, 3.349769925580867, 3.1968555164001082, 3.6777895590344913, 3.80180528691167, 3.8380577342402447], [2.0000000000000004, 2.96560415900856, 3.094296202947784, 3.5056333219528852, 3.6472487729268925, 3.673344607779368, 3.757918552036199], [1.9222721461873966, 2.7025466175051873, 2.905269289235534, 3.211051094432057, 3.2513315420449307, 3.5860031213284933, 3.712763253449528], [1.9125811119929044, 2.719797655243836, 2.8757317535411957, 3.2440217907705953, 3.486520066718862, 3.702544915591223, 3.752945056153015]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[1.783393713169304, 2.4135505307920595, 2.8463379338131047, 3.2110550948299927, 3.5218222812690794, 3.7895216665698856, 4.022415965050468], [1.783393713169304, 2.413556018361489, 2.8498222836267577, 3.2172366854205787, 3.5302032014025317, 3.7997474629095054, 4.034218884382669], [1.783393713169304, 2.413561063914525, 2.8530334958754793, 3.222941371337704, 3.537944291241033, 3.809198363295662, 4.045132333934003], [1.7833937131693043, 2.4135657187893025, 2.856002476030103, 3.228222291961466, 3.5451161272510583, 3.817959232976077, 4.055253208564093], [1.783393713169304, 2.4135700266700364, 2.8587556364285818, 3.2331249746161705, 3.55177927410201, 3.8261029812714646, 4.064664822545206], [1.7833937131693038, 2.4135740249621516, 2.8613156841712573, 3.2376886504513576, 3.5579859991722755, 3.8336925954017813, 4.073439208300174], [1.783393713169304, 2.413581217322917, 2.865932386784194, 3.2459305334739947, 3.5692057458784925, 3.847421241463208, 4.0893187468313785], [1.7833937131693043, 2.4135844635635446, 2.8680209893985755, 3.249664214549826, 3.5742929167517032, 3.853649835697924, 4.0053187182249355], [1.783393713169304, 2.4135875058286644, 2.8699811160514064, 3.2531710882023552, 3.5790736068267295, 3.8595053786287448, 3.917597140952248], [1.7833937131693038, 2.4135903627576893, 2.871824267412593, 3.2564712118036345, 3.583574702489421, 3.7887130631460755, 3.838647721406829], [1.783393713169304, 2.4135930507861216, 2.8735606112632195, 3.2595823454531065, 3.5878200346220503, 3.7182118313818426, 3.7672172941990683], [1.783393713169304, 2.4135955844619374, 2.875199170154922, 3.262520271720038, 3.591821345876112, 3.6541198025052677, 3.702280542192013], [1.783393713169304, 2.4135379749582864, 2.8383974683943554, 3.1970001656750644, 3.502795054178308, 3.766330127778589, 3.995668158730783], [1.783393713169304, 2.413544540461078, 2.8425440499562638, 3.2043341878346627, 3.51271878461315, 3.7784215976190616, 4.009610215818698]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}