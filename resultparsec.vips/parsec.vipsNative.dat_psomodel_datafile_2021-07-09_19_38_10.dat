{"config": {"pkg": "parsec.vips", "command": "runprocess.py -p parsec.vips -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "memorWallTest.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_19:38:10", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\ndef calculateMu(p,m1,m2):\n    return min(m1+m2/p, 1)\n\ndef calculateRho(k, phi):\n    return 1 + k*phi\n\n# values [f, m1, m2, k]\ndef _func_speedup(param, freq, cores):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :return: calculated speedup value\n    \"\"\"\n\n    phi = (freq / 1000000) / 2.6\n\n    #(1 − mu) + rho mu\n    up_arg=(1-calculateMu(1,param[1],param[2]))+calculateRho(param[3],phi)*calculateMu(1,param[1],param[2])\n\n    # ((1 − mu_p ) + rho mu_p ) * (1 − f ) + f/p)\n    leftSide = ((1- calculateMu(cores, param[1], param[2])) + calculateRho(param[3], phi)) * ((1-param[0])+ param[0]/cores)\n\n    # rho mu_p\n    rightSide = phi*calculateMu(cores, param[1], param[2])\n\n    #Calculate max btw below args\n    below_arg = max(leftSide, rightSide)\n\n    speedup = up_arg / below_arg\n    return speedup\n\n\ndef model(par, x):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x:\n        y_model = _func_speedup(par, f, p)\n        pred.append(y_model)\n    return {'x': x, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas)\n    # print(\"Y_meas\")\n    # print(y_meas)\n    # print(pred['y'])\n    # print()\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0, 0, 0, 0]", "uppervalues": "[1, 1, 1, 10]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_example_inputsize_cores.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.vipsNative.dat", "verbosity": 1}, "measuresfraction": 16, "measuresfraction_points": [[1000000, 6], [1100000, 7], [1200000, 3], [1200000, 5], [1300000, 6], [1400000, 4], [1500000, 3], [1700000, 4], [1700000, 7], [1800000, 2], [1900000, 7], [2000000, 5], [2100000, 3], [2200000, 5], [2200000, 6], [800000, 4]]}, "data": {"params": "[0.8900986453601978, 0.7005290881439132, 0.9103110416446144, 2.0197133121610342]", "error": 0.059211803457952475, "errorrel": 0.6379270609769734, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.vips", "execdate": "03-07-2021_12:21:39", "command": "runprocess.py -p parsec.vips -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[1.900650469783733, 2.725873754152824, 2.9304817418138183, 3.0127340823970035, 3.463026742301459, 3.61282936452022, 3.6942278253039174], [1.9494822717288987, 2.7182441300860436, 2.9217231453244787, 3.1772663877266387, 3.5348608668666595, 3.709589288945178, 3.708180354849795], [1.9802410704837763, 2.9446550416982564, 3.140764700497391, 3.192741372625049, 3.6651947866961043, 3.7497176582024845, 3.862646126132888], [1.992731211013569, 2.9675878539747527, 3.189851472770008, 3.579423868312757, 3.68950159066808, 3.807094681972823, 3.863748334208294], [1.9876417220845344, 2.955182072829132, 3.088342916884475, 3.5034591816564538, 3.6817615288741172, 3.7965085145121558, 3.868517548454688], [1.9898876810285668, 2.9313683762502656, 3.0686716791979944, 3.3725210152615683, 3.6825290736532543, 3.7866306240263903, 3.8606563120401725], [1.9618803879310347, 2.9551403006878085, 3.3565321595649067, 3.561385920727682, 3.673114266259804, 3.7986073077224, 3.849711899349791], [1.9881578947368423, 2.9558665462831595, 3.2014202561117577, 3.202613313457866, 3.667671379034409, 3.769009374486048, 3.8241461786628097], [1.9891786438249683, 2.9231975272694695, 3.089114535255272, 3.2110222659613727, 3.6388780460603356, 3.778466170637793, 3.8745992162451017], [1.9855580639479962, 2.9676462142241795, 3.079666236217344, 3.5069283411571743, 3.638422720337988, 3.7995036612641315, 3.869812145041503], [1.982716879623403, 2.927006031123576, 3.349769925580867, 3.1968555164001082, 3.6777895590344913, 3.80180528691167, 3.8380577342402447], [2.0000000000000004, 2.96560415900856, 3.094296202947784, 3.5056333219528852, 3.6472487729268925, 3.673344607779368, 3.757918552036199], [1.9222721461873966, 2.7025466175051873, 2.905269289235534, 3.211051094432057, 3.2513315420449307, 3.5860031213284933, 3.712763253449528], [1.9125811119929044, 2.719797655243836, 2.8757317535411957, 3.2440217907705953, 3.486520066718862, 3.702544915591223, 3.752945056153015]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[1.8019619416079211, 2.4594141144117896, 2.8912046267761484, 3.2578977037449275, 3.5749240215021834, 3.851148529443231, 4.093731311172301], [1.8019619416079213, 2.4594141144117896, 2.895921969832907, 3.266378310700703, 3.586457452841315, 3.865243130509183, 4.110020379903874], [1.8019619416079213, 2.4594141144117896, 2.90027360757782, 3.2742160707287087, 3.5971293814569374, 3.8782957771552806, 4.125114509141083], [1.8019619416079213, 2.45941411441179, 2.904300479306872, 3.281481408291175, 3.60703285845348, 3.890417891830148, 4.139140534860139], [1.8019619416079211, 2.4594141144117896, 2.908037633473815, 3.288234823505937, 3.616248000008978, 3.901705557017791, 4.152207955900904], [1.8019619416079213, 2.4594141144117896, 2.9115152504554462, 3.2945285808487057, 3.624844159476198, 3.912242067291014, 4.1644117983385085], [1.8019619416079213, 2.4594141144117896, 2.917792995833684, 3.305912873936921, 3.6404132929807242, 3.931342830239418, 4.186549945318056], [1.8019619416079213, 2.4594141144117896, 2.9206357354473598, 3.3110777181009476, 3.647485316788548, 3.940026417822331, 4.1966207083412295], [1.8019619416079213, 2.4594141144117896, 2.923305129896086, 3.315933146844262, 3.654138569737536, 3.9482000185226025, 4.160701957320055], [1.8019619416079211, 2.4594141144117896, 2.925816565481379, 3.3205061562103757, 3.6604091785635635, 3.955907277962469, 4.076679431364672], [1.8019619416079213, 2.4594141144117896, 2.9281836598933473, 3.324820690508759, 3.666329230691623, 3.9223602262264023, 4.000659050738374], [1.8019619416079211, 2.4594141144117896, 2.930418509233097, 3.3288980616873154, 3.6719273234261247, 3.8546033633583043, 3.9315496138053763], [1.8019619416079213, 2.4594141144117896, 2.880471506148783, 3.238663328760612, 3.548818733391835, 3.8192911127904314, 4.056951968045975], [1.8019619416079213, 2.4594141144117896, 2.8860734563387913, 3.248691779065469, 3.5624203811466706, 3.8358820229139585, 4.076099557143668]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}