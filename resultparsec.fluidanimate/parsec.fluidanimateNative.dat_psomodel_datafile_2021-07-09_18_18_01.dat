{"config": {"pkg": "parsec.fluidanimate", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "memorWallTest.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_18:18:01", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\ndef calculateMu(p,m1,m2):\n    return min(m1+m2/p, 1)\n\ndef calculateRho(k, phi):\n    return 1 + k*phi\n\n# values [f, m1, m2, k]\ndef _func_speedup(param, freq, cores):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :return: calculated speedup value\n    \"\"\"\n\n    phi = (freq / 1000000) / 2.6\n\n    #(1 − mu) + rho mu\n    up_arg=(1-calculateMu(1,param[1],param[2]))+calculateRho(param[3],phi)*calculateMu(1,param[1],param[2])\n\n    # ((1 − mu_p ) + rho mu_p ) * (1 − f ) + f/p)\n    leftSide = ((1- calculateMu(cores, param[1], param[2])) + calculateRho(param[3], phi)) * ((1-param[0])+ param[0]/cores)\n\n    # rho mu_p\n    rightSide = phi*calculateMu(cores, param[1], param[2])\n\n    #Calculate max btw below args\n    below_arg = max(leftSide, rightSide)\n\n    speedup = up_arg / below_arg\n    return speedup\n\n\ndef model(par, x):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x:\n        y_model = _func_speedup(par, f, p)\n        pred.append(y_model)\n    return {'x': x, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas)\n    # print(\"Y_meas\")\n    # print(y_meas)\n    # print(pred['y'])\n    # print()\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0, 0, 0, 0]", "uppervalues": "[1, 1, 1, 10]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_example_inputsize_cores.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.fluidanimateNative.dat", "verbosity": 1}, "measuresfraction": 32, "measuresfraction_points": [[1000000, 6], [1000000, 7], [1100000, 4], [1100000, 7], [1200000, 5], [1200000, 6], [1300000, 3], [1300000, 4], [1400000, 2], [1400000, 6], [1500000, 4], [1500000, 8], [1700000, 3], [1700000, 5], [1800000, 3], [1800000, 7], [1900000, 2], [1900000, 4], [1900000, 8], [2000000, 6], [2000000, 7], [2100000, 3], [2100000, 5], [2200000, 3], [2200000, 6], [2300000, 4], [2300000, 6], [2301000, 2], [2301000, 5], [800000, 4], [800000, 7], [900000, 5]]}, "data": {"params": "[1.0, 0.9932096849297007, 0.6571994161654535, 5.739516156276726]", "error": 27287206672.55874, "errorrel": 105.4572091513622, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.fluidanimate", "execdate": "27-06-2021_13:13:44", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[1.8497395665042458, 178895.25, 2.3150319312071748, 178895.25, 178895.25, 178895.25, 2.9617560749481595], [1.8515236885134925, 177777.75, 2.285009655952469, 177777.75, 177777.75, 177777.75, 2.9377225669456584], [1.852342852948424, 176647.75, 2.3999178053345016, 176647.75, 176647.75, 176647.75, 3.030706344576742], [1.880502197183739, 220529.0, 2.401579062000871, 220529.0, 220529.0, 220529.0, 3.0515583271449196], [1.878733751338125, 204750.66666666666, 2.3287762638095884, 204750.66666666666, 204750.66666666666, 204750.66666666666, 3.0341822923870305], [1.8771758794298632, 191272.33333333334, 2.378821734606312, 191272.33333333334, 191272.33333333334, 191272.33333333334, 3.0144571983924773], [1.8723445096179048, 253610.0, 2.38647965785103, 169073.33333333334, 253610.0, 253610.0, 2.9650197582247992], [1.8669002569493107, 239766.0, 2.357870928088506, 239766.0, 239766.0, 239766.0, 2.9394074991265113], [1.8709611107228166, 227536.0, 2.2977747931067563, 227536.0, 227536.0, 227536.0, 2.918606217251044], [1.8685778221294866, 216272.0, 2.316910386201725, 216272.0, 216272.0, 216272.0, 2.893116087433448], [1.8696976012904278, 206323.0, 2.3257095836057444, 206323.0, 206323.0, 206323.0, 2.8560374302681306], [1.8645499893614508, 197171.5, 2.3134184759971608, 197171.5, 197171.5, 197171.5, 2.814464039739353], [1.642399669782429, 246695.0, 1.9412727515954642, 246695.0, 246695.0, 246695.0, 2.2335850354918154], [1.6429314275809657, 246443.0, 1.923637726069954, 246443.0, 246443.0, 246443.0, 2.229285016463437], [3.3522858276793985, 354759.0, 4.213064622437043, 354759.0, 354759.0, 354759.0, 5.17881229745117], [1.8397832897630606, 177347.75, 2.295652314612559, 236463.66666666666, 177347.75, 177347.75, 2.9584090947003183]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[2.0, 3.0000000000000004, 4.0, 5.0, 6.000000000000001, 7.000000000000001, 8.0], [2.0, 3.0000000000000004, 4.0, 5.0, 6.000000000000001, 7.0, 8.0], [2.0, 3.0000000000000004, 4.0, 5.0, 6.000000000000001, 7.0, 7.906182822943392], [2.0, 3.0, 4.0, 4.999999999999999, 6.0, 7.000000000000001, 7.739516156276726], [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 7.596659013419584], [2.0, 3.0000000000000004, 4.0, 5.0, 6.000000000000001, 7.000000000000001, 7.472849489610058], [2.0, 3.0, 4.0, 4.999999999999999, 6.0, 7.000000000000001, 7.268927920982608], [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 7.1839606007211705], [2.0, 3.0, 4.0, 4.999999999999999, 6.0, 7.0, 7.107937208908305], [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 7.0395161562767266], [2.0, 3.0, 4.0, 5.0, 6.0, 6.977611394371965, 6.977611394371965], [2.0, 3.0, 4.0, 5.0, 6.0, 6.9213343380949075, 6.9213343380949075], [2.0, 3.0, 4.0, 5.0, 6.0, 6.869950938885422, 6.869950938885422], [2.0, 3.0, 4.0, 4.999999999999999, 6.0, 6.869459659101584, 6.869459659101584], [2.0, 3.0, 4.0, 4.999999999999999, 6.0, 7.0, 8.0], [2.0, 3.0, 4.0, 5.0, 6.0, 7.000000000000001, 8.0]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}