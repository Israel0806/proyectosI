{"config": {"pkg": "parsec.fluidanimate", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "memorWallTest.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_21:04:18", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\ndef calculateMu(p,m1,m2):\n    return min(m1+m2/p, 1)\n\ndef calculateRho(k, phi):\n    return 1 + k*phi\n\n# values [f, m1, m2, k]\ndef _func_speedup(param, freq, cores):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :return: calculated speedup value\n    \"\"\"\n\n    phi = (freq / 1000000) / 2.6\n\n    #(1 − mu) + rho mu\n    up_arg=(1-calculateMu(1,param[1],param[2]))+calculateRho(param[3],phi)*calculateMu(1,param[1],param[2])\n\n    # ((1 − mu_p ) + rho mu_p ) * (1 − f ) + f/p)\n    leftSide = ((1- calculateMu(cores, param[1], param[2])) + calculateRho(param[3], phi)) * ((1-param[0])+ param[0]/cores)\n\n    # rho mu_p\n    rightSide = phi*calculateMu(cores, param[1], param[2])\n\n    #Calculate max btw below args\n    below_arg = max(leftSide, rightSide)\n\n    speedup = up_arg / below_arg\n    return speedup\n\n\ndef model(par, x):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x:\n        y_model = _func_speedup(par, f, p)\n        pred.append(y_model)\n    return {'x': x, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas)\n    # print(\"Y_meas\")\n    # print(y_meas)\n    # print(pred['y'])\n    # print()\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0, 0, 0, 0]", "uppervalues": "[1, 1, 1, 10]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_example_inputsize_cores.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.fluidanimateNative.dat", "verbosity": 1}, "measuresfraction": 4, "measuresfraction_points": [[1900000, 4]]}, "data": {"params": "[0.7596798938800917, 0.7229870323909348, 0.766155813099147, 8.769984149259946]", "error": 0.3082703299130361, "errorrel": 2.578951422472558, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.fluidanimate", "execdate": "27-06-2021_13:13:44", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[1.8497395665042458, 178895.25, 2.3150319312071748, 178895.25, 178895.25, 178895.25, 2.9617560749481595], [1.8515236885134925, 177777.75, 2.285009655952469, 177777.75, 177777.75, 177777.75, 2.9377225669456584], [1.852342852948424, 176647.75, 2.3999178053345016, 176647.75, 176647.75, 176647.75, 3.030706344576742], [1.880502197183739, 220529.0, 2.401579062000871, 220529.0, 220529.0, 220529.0, 3.0515583271449196], [1.878733751338125, 204750.66666666666, 2.3287762638095884, 204750.66666666666, 204750.66666666666, 204750.66666666666, 3.0341822923870305], [1.8771758794298632, 191272.33333333334, 2.378821734606312, 191272.33333333334, 191272.33333333334, 191272.33333333334, 3.0144571983924773], [1.8723445096179048, 253610.0, 2.38647965785103, 169073.33333333334, 253610.0, 253610.0, 2.9650197582247992], [1.8669002569493107, 239766.0, 2.357870928088506, 239766.0, 239766.0, 239766.0, 2.9394074991265113], [1.8709611107228166, 227536.0, 2.2977747931067563, 227536.0, 227536.0, 227536.0, 2.918606217251044], [1.8685778221294866, 216272.0, 2.316910386201725, 216272.0, 216272.0, 216272.0, 2.893116087433448], [1.8696976012904278, 206323.0, 2.3257095836057444, 206323.0, 206323.0, 206323.0, 2.8560374302681306], [1.8645499893614508, 197171.5, 2.3134184759971608, 197171.5, 197171.5, 197171.5, 2.814464039739353], [1.642399669782429, 246695.0, 1.9412727515954642, 246695.0, 246695.0, 246695.0, 2.2335850354918154], [1.6429314275809657, 246443.0, 1.923637726069954, 246443.0, 246443.0, 246443.0, 2.229285016463437], [3.3522858276793985, 354759.0, 4.213064622437043, 354759.0, 354759.0, 354759.0, 5.17881229745117], [1.8397832897630606, 177347.75, 2.295652314612559, 236463.66666666666, 177347.75, 177347.75, 2.9584090947003183]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[1.612486962141247, 2.016179237715674, 2.279725238254675, 2.4791806101774587, 2.6353064017503716, 2.7608105666045426, 2.8638861084109464], [1.612486962141247, 2.0168900142883026, 2.282859171866849, 2.4840770783088817, 2.6415520814795714, 2.768125577719923, 2.8720708368468184], [1.612486962141247, 2.017506202112172, 2.2855812351267937, 2.4883348056552954, 2.6469870204543002, 2.7744943613611737, 2.8791996063495704], [1.612486962141247, 2.0180455047375117, 2.2879676153929664, 2.4920711242013556, 2.6517594585525717, 2.7800893620736296, 2.8854643863874085], [1.612486962141247, 2.0185214672125134, 2.290076800616591, 2.4953762866560774, 2.655983571891368, 2.785043521423795, 2.891013272663146], [1.612486962141247, 2.018944629379033, 2.291954436996217, 2.4983208523967546, 2.659748725591774, 2.789460976790303, 2.895962343618086], [1.612486962141247, 2.019664187455286, 2.295152494129186, 2.503341022758607, 2.666172033215362, 2.7970005360920234, 2.904412117021601], [1.6124869621412468, 2.0199726398208964, 2.2965254376540427, 2.505498098996423, 2.6689336095827416, 2.800243354436076, 2.9080475390020415], [1.612486962141247, 2.0202530876926152, 2.2977747931067563, 2.5074619894786982, 2.671448697414222, 2.80319742718313, 2.9113598408320636], [1.6124869621412468, 2.0205091792661007, 2.2989165292735265, 2.5092575341891847, 2.673748887893109, 2.8058996760846955, 2.9143902684130474], [1.612486962141247, 2.0207439554325646, 2.2999639774399423, 2.5109054895404923, 2.675860594877902, 2.808380985344406, 2.9171733341665114], [1.612486962141247, 2.0209599711000186, 2.3009283543298484, 2.512423334396324, 2.6778060737662455, 2.8106673872446346, 2.9197381372216475], [1.612486962141247, 2.0211593885482566, 2.3018191653697047, 2.5138258924311874, 2.67960420886326, 2.8127809789379716, 2.922109384714825], [1.612486962141247, 2.021161305372091, 2.301827730443221, 2.513839380237788, 2.6796215027429087, 2.8128013084276513, 2.9221321938397447], [1.612486962141247, 2.0143709998357586, 2.2717811806960992, 2.466795036021406, 2.6195299579240565, 2.742351170766045, 2.8432470944661254], [1.612486962141247, 2.015350281777977, 2.2760783043906456, 2.4734900103980824, 2.628053950367166, 2.7523215303820177, 2.8543920310850748]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}