{"config": {"pkg": "parsec.blackscholes", "command": "runprocess.py -p parsec.blackscholes -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "memorWallTest.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_19:06:17", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\ndef calculateMu(p,m1,m2):\n    return min(m1+m2/p, 1)\n\ndef calculateRho(k, phi):\n    return 1 + k*phi\n\n# values [f, m1, m2, k]\ndef _func_speedup(param, freq, cores):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :return: calculated speedup value\n    \"\"\"\n\n    phi = (freq / 1000000) / 2.6\n\n    #(1 − mu) + rho mu\n    up_arg=(1-calculateMu(1,param[1],param[2]))+calculateRho(param[3],phi)*calculateMu(1,param[1],param[2])\n\n    # ((1 − mu_p ) + rho mu_p ) * (1 − f ) + f/p)\n    leftSide = ((1- calculateMu(cores, param[1], param[2])) + calculateRho(param[3], phi)) * ((1-param[0])+ param[0]/cores)\n\n    # rho mu_p\n    rightSide = phi*calculateMu(cores, param[1], param[2])\n\n    #Calculate max btw below args\n    below_arg = max(leftSide, rightSide)\n\n    speedup = up_arg / below_arg\n    return speedup\n\n\ndef model(par, x):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x:\n        y_model = _func_speedup(par, f, p)\n        pred.append(y_model)\n    return {'x': x, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas)\n    # print(\"Y_meas\")\n    # print(y_meas)\n    # print(pred['y'])\n    # print()\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0, 0, 0, 0]", "uppervalues": "[1, 1, 1, 10]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_example_inputsize_cores.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.blackscholesNative.dat", "verbosity": 1}, "measuresfraction": 8, "measuresfraction_points": [[1100000, 7], [1200000, 5], [1300000, 6], [1500000, 3], [1700000, 4], [1900000, 7], [2100000, 3], [2200000, 5]]}, "data": {"params": "[0.9263649220459639, 0.6973484036520639, 0.9081914597559093, 3.9750915461512015]", "error": 0.030923671998616342, "errorrel": 0.342171353049734, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.blackscholes", "execdate": "20-06-2021_20:42:40", "command": "runprocess.py -p parsec.blackscholes -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[1.9524015577672, 2.756924900014812, 2.9138160469667316, 3.4391038226123105, 3.9175941273975847, 4.402471837024334, 4.7261069671480715], [1.9706490718194434, 2.795980534195178, 2.995443058125883, 3.627578561789088, 4.07454525768731, 4.513913877893727, 4.824061017818228], [1.9672998820909209, 2.950118858175674, 3.0357626604669963, 3.6993496255419784, 4.129582267689684, 4.6539391309737805, 4.9089244851258576], [1.99795544575542, 2.9966778823629627, 3.0112345124221607, 3.752880307232771, 4.195402641543186, 4.761063743402354, 4.901187698094807], [2.000275343031527, 2.9982115834365115, 3.0788284045959693, 3.7215470871161456, 4.173763166294287, 4.7569573283859, 4.916679199879682], [1.9955959397511462, 2.988037163238791, 3.0528464447616903, 3.6098738375881068, 4.175636326264945, 4.734734307022996, 4.89836842951294], [1.997846148133019, 2.996741400919092, 3.05858608829131, 3.7119398350984927, 4.209459723797973, 4.755712707182321, 4.869789545145961], [2.001062615608643, 2.9956401343309964, 3.037698649778946, 3.698625154579181, 4.2386728356467005, 4.740350550065261, 4.864619211634137], [1.998299672375897, 2.9963932591256763, 3.0454430539754775, 3.7086780835097173, 4.150301464254953, 4.748928201843, 4.866925912832686], [1.9961174366356935, 2.9915334575528747, 3.07589405754235, 3.612157094927965, 4.175480220833142, 4.730628069268545, 4.863109788500371], [1.9974800696417117, 2.9952251726151626, 2.9979026989857314, 3.7065975174290084, 4.237861482381531, 4.732888237529176, 4.861125048781847], [1.9970484486358073, 2.9974068071312803, 2.9991351039677108, 3.7364971041170922, 4.1584470094438615, 4.736383814239371, 4.886846741045214], [1.9648932130370447, 2.9247816934352096, 2.882474979349559, 3.4639072924121055, 4.158320631841486, 4.646035235470787, 4.844482469167689], [1.9742867622016715, 2.8634584694885628, 2.8641114320462147, 3.51085488003727, 3.999601953083537, 4.6337196790358774, 4.856954111884506]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[1.8628303425138493, 2.6149028496478923, 3.181153425142668, 3.685990997081521, 4.137861597862269, 4.544295027714901, 4.911647746870757], [1.862830342513849, 2.614902849647892, 3.186426666161723, 3.6956125079912323, 4.151220350509441, 4.560935839492662, 4.931209598713291], [1.8628303425138493, 2.6149028496478923, 3.191145856605816, 3.704238634163219, 4.163211097056201, 4.575884797225863, 4.948793284267372], [1.862830342513849, 2.6149028496478923, 3.195393957910308, 3.71201624350034, 4.1740337385117705, 4.589387432983763, 4.964684421330967], [1.8628303425138493, 2.6149028496478923, 3.1992381558006198, 3.719064664769005, 4.183851037258359, 4.601643960339283, 4.979116167254163], [1.862830342513849, 2.6149028496478923, 3.202733439947962, 3.7254818533778895, 4.192796858997443, 4.612819268882416, 4.992280734654785], [1.862830342513849, 2.6149028496478923, 3.208851468147425, 3.7367338393557765, 4.208500390907496, 4.632452120835289, 5.01542203506776], [1.8628303425138493, 2.6149028496478923, 3.2115439171692985, 3.741693567715089, 4.215429514308495, 4.641121396735538, 5.025646100201963], [1.862830342513849, 2.6149028496478923, 3.2140295350116537, 3.7462765922786274, 4.221836281334538, 4.64914059933261, 5.035106541787752], [1.862830342513849, 2.6149028496478923, 3.2163312729665385, 3.75052426023097, 4.227777613697272, 4.656580205713621, 5.043885831212745], [1.862830342513849, 2.6149028496478923, 3.2184688076905914, 3.7544720812829246, 4.23330245256761, 4.663500860675508, 5.052054976654148], [1.8628303425138493, 2.6149028496478923, 3.2204591051122375, 3.7581507227323736, 4.2384531098240075, 4.669955033572196, 5.059675447872512], [1.8628303425138493, 2.6149028496478923, 3.168502589606007, 3.6629827690121286, 4.1059830359062675, 4.504642368968242, 4.865085022055534], [1.862830342513849, 2.6149028496478923, 3.175222477326248, 3.6751912634852055, 4.122886565945934, 4.525657919872269, 4.889754016571665]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}