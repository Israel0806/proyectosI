{"config": {"pkg": "parsec.blackscholes", "command": "runprocess.py -p parsec.blackscholes -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "memorWallTest.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_17:56:08", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\ndef calculateMu(p,m1,m2):\n    return min(m1+m2/p, 1)\n\ndef calculateRho(k, phi):\n    return 1 + k*phi\n\n# values [f, m1, m2, k]\ndef _func_speedup(param, freq, cores):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :return: calculated speedup value\n    \"\"\"\n\n    phi = (freq / 1000000) / 2.6\n\n    #(1 − mu) + rho mu\n    up_arg=(1-calculateMu(1,param[1],param[2]))+calculateRho(param[3],phi)*calculateMu(1,param[1],param[2])\n\n    # ((1 − mu_p ) + rho mu_p ) * (1 − f ) + f/p)\n    leftSide = ((1- calculateMu(cores, param[1], param[2])) + calculateRho(param[3], phi)) * ((1-param[0])+ param[0]/cores)\n\n    # rho mu_p\n    rightSide = phi*calculateMu(cores, param[1], param[2])\n\n    #Calculate max btw below args\n    below_arg = max(leftSide, rightSide)\n\n    speedup = up_arg / below_arg\n    return speedup\n\n\ndef model(par, x):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x:\n        y_model = _func_speedup(par, f, p)\n        pred.append(y_model)\n    return {'x': x, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas)\n    # print(\"Y_meas\")\n    # print(y_meas)\n    # print(pred['y'])\n    # print()\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0, 0, 0, 0]", "uppervalues": "[1, 1, 1, 10]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_example_inputsize_cores.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.blackscholesNative.dat", "verbosity": 1}, "measuresfraction": 4, "measuresfraction_points": [[1200000, 5], [1300000, 6], [1700000, 4], [2100000, 3]]}, "data": {"params": "[0.9288476166549275, 0.6675454844041971, 0.9980691484011069, 2.9943266983450956]", "error": 0.029177100113688716, "errorrel": 0.3220610377783495, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.blackscholes", "execdate": "20-06-2021_20:42:40", "command": "runprocess.py -p parsec.blackscholes -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[1.9524015577672, 2.756924900014812, 2.9138160469667316, 3.4391038226123105, 3.9175941273975847, 4.402471837024334, 4.7261069671480715], [1.9706490718194434, 2.795980534195178, 2.995443058125883, 3.627578561789088, 4.07454525768731, 4.513913877893727, 4.824061017818228], [1.9672998820909209, 2.950118858175674, 3.0357626604669963, 3.6993496255419784, 4.129582267689684, 4.6539391309737805, 4.9089244851258576], [1.99795544575542, 2.9966778823629627, 3.0112345124221607, 3.752880307232771, 4.195402641543186, 4.761063743402354, 4.901187698094807], [2.000275343031527, 2.9982115834365115, 3.0788284045959693, 3.7215470871161456, 4.173763166294287, 4.7569573283859, 4.916679199879682], [1.9955959397511462, 2.988037163238791, 3.0528464447616903, 3.6098738375881068, 4.175636326264945, 4.734734307022996, 4.89836842951294], [1.997846148133019, 2.996741400919092, 3.05858608829131, 3.7119398350984927, 4.209459723797973, 4.755712707182321, 4.869789545145961], [2.001062615608643, 2.9956401343309964, 3.037698649778946, 3.698625154579181, 4.2386728356467005, 4.740350550065261, 4.864619211634137], [1.998299672375897, 2.9963932591256763, 3.0454430539754775, 3.7086780835097173, 4.150301464254953, 4.748928201843, 4.866925912832686], [1.9961174366356935, 2.9915334575528747, 3.07589405754235, 3.612157094927965, 4.175480220833142, 4.730628069268545, 4.863109788500371], [1.9974800696417117, 2.9952251726151626, 2.9979026989857314, 3.7065975174290084, 4.237861482381531, 4.732888237529176, 4.861125048781847], [1.9970484486358073, 2.9974068071312803, 2.9991351039677108, 3.7364971041170922, 4.1584470094438615, 4.736383814239371, 4.886846741045214], [1.9648932130370447, 2.9247816934352096, 2.882474979349559, 3.4639072924121055, 4.158320631841486, 4.646035235470787, 4.844482469167689], [1.9742867622016715, 2.8634584694885628, 2.8641114320462147, 3.51085488003727, 3.999601953083537, 4.6337196790358774, 4.856954111884506]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[1.8671479717519321, 2.626269352523645, 3.1740222557762103, 3.6659054994515023, 4.10838611359749, 4.507892405823714, 4.870113788421545], [1.867147971751932, 2.626269352523645, 3.180018591002924, 3.6767675542932854, 4.123399755801976, 4.52654055794143, 4.89199272654862], [1.867147971751932, 2.6262693525236447, 3.185454605861222, 3.686634758520758, 4.137056259102542, 4.543518609596992, 4.911925705076552], [1.867147971751932, 2.6262693525236447, 3.19040533240993, 3.695637803996376, 4.149531681474145, 4.559041302353702, 4.930161286868226], [1.8671479717519321, 2.626269352523645, 3.1949329784897245, 3.7038854512481287, 4.1609728904547545, 4.573288075528011, 4.946907430768448], [1.8671479717519321, 2.6262693525236447, 3.1990895552879457, 3.711468944601766, 4.171503372087687, 4.586410034167432, 4.962339457384343], [1.867147971751932, 2.626269352523645, 3.2064581482072265, 3.7249404468876137, 4.190235049316344, 4.609773357050362, 4.989834872803935], [1.867147971751932, 2.6262693525236447, 3.209739102215236, 3.7309502729376653, 4.198601880486647, 4.62021806856807, 5.002134769035759], [1.8671479717519321, 2.626269352523645, 3.2127890294680532, 3.7365432790070323, 4.206394173830586, 4.6299506027786315, 5.013600393021917], [1.8671479717519321, 2.626269352523645, 3.21563150152793, 3.741761375428927, 4.213669143913061, 4.639041398423912, 5.024313840587965], [1.867147971751932, 2.626269352523645, 3.218286988766136, 3.7466410360883136, 4.220476652525194, 4.647551901618122, 5.034346778232499], [1.867147971751932, 2.626269352523645, 3.2207733541322474, 3.7512141522279054, 4.22686035306953, 4.655535956527457, 5.043762048304335], [1.867147971751932, 2.626269352523645, 3.159962268284966, 3.6405275266320087, 4.073388914337282, 4.464492550484032, 4.81925486949279], [1.8671479717519321, 2.6262693525236447, 3.16737425967545, 3.653890149315998, 4.091802452762696, 4.487314978805306, 4.84598930533018]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}