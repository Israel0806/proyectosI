{"config": {"pkg": "parsec.vips", "command": "runprocess.py -p parsec.vips -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "deSensi.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_19:17:02", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\n# values [B]\ndef _func_speedup(param, freq, cores, f_min, min_exec_time):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :param B1: T(1, f_min) * B\n    :param B2: T(1, f_min) * (1 - B)\n    :return: calculated speedup value\n    :return: B1 * f_min / f + B2 * f_min / (f * t)\n    \"\"\"\n    B1 = min_exec_time * param[0]\n    B2 = min_exec_time * (1 - param[0])\n    return B1 * f_min / freq + B2 * f_min / (freq * cores)\n\n\ndef model(par, x_meas, f_min, min_exec_time):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x_meas:\n        y_model = _func_speedup(par, f, p, f_min, min_exec_time)\n        pred.append(y_model)\n    return {'x': x_meas, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    # print(pred)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0]", "uppervalues": "[1]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_deSensi.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.vipsNative.dat", "verbosity": 1}, "measuresfraction": 4, "measuresfraction_points": [[1200000, 4], [1300000, 6], [1700000, 3], [2100000, 2]]}, "data": {"params": "[0.3086380562516753]", "error": 393.2471948827959, "errorrel": 3.1913977009821557, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.vips", "execdate": "03-07-2021_12:21:39", "command": "runprocess.py -p parsec.vips -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[205.122, 107.922, 75.25, 69.996, 68.08500000000001, 59.232, 56.776, 55.525], [205.029, 105.17099999999999, 75.42699999999999, 70.174, 64.53, 58.002, 55.27, 55.291], [205.852, 103.953, 69.907, 65.542, 64.475, 56.164, 54.898, 53.293], [191.356, 96.027, 64.482, 59.989, 53.46, 51.865, 50.263, 49.526], [177.24, 89.17099999999999, 59.976, 57.39, 50.59, 48.14, 46.685, 45.816], [165.29399999999998, 83.06700000000001, 56.388, 53.865, 49.012, 44.886, 43.652, 42.815], [145.65, 74.24, 49.287, 43.393, 40.897, 39.653, 38.343, 37.834], [137.501, 69.16, 46.518, 42.95, 42.934, 37.49, 36.482, 35.956], [130.512, 65.611, 44.647, 42.249, 40.645, 35.866, 34.541, 33.684], [124.012, 62.457, 41.788, 40.268, 35.362, 34.084, 32.639, 32.046], [117.932, 59.48, 40.291, 35.206, 36.89, 32.066, 31.02, 30.727], [112.94800000000001, 56.474, 38.086, 36.502, 32.219, 30.968, 30.748, 30.056], [204.499, 106.384, 75.669, 70.389, 63.686, 62.897, 57.027, 55.08], [204.847, 107.10499999999999, 75.31700000000001, 71.233, 63.146, 58.754, 55.326, 54.583]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[163.5992, 107.04606954616452, 88.19502606155271, 78.76950431924679, 73.11419127386324, 69.34398257694089, 66.65097636485348, 64.63122170578794], [148.72654545454543, 97.31460867833138, 80.17729641959338, 71.60864029022436, 66.46744661260296, 63.039984160855354, 60.59179669532135, 58.755656096170846], [136.33266666666665, 89.20505795513711, 73.49585505129393, 65.64125359937233, 60.92849272821938, 57.786652147450745, 55.542480304044574, 53.85935142148995], [125.84553846153844, 82.34313042012656, 67.84232773965593, 60.591926399420615, 56.24168559527942, 53.341525059185294, 51.269981819118065, 49.71632438906764], [116.85657142857141, 76.46147824726037, 62.99644718682336, 56.26393165660485, 52.22442233847375, 49.53141612638635, 47.607840260609635, 46.16515836127709], [109.06613333333331, 71.36404636410968, 58.796684041035135, 52.51300287949786, 48.7427941825755, 46.229321717960595, 44.433984243235656, 43.08748113719196], [96.23482352941176, 62.968276203626196, 51.879427095031005, 46.33500254073341, 43.00834780815485, 40.79057798643582, 39.20645668520793, 38.018365709287025], [90.88844444444445, 59.470038636758076, 48.997236700862615, 43.76083573291489, 40.618995152146255, 38.52443476496716, 37.028320202696385, 35.906234280993296], [86.10484210526315, 56.340036603244485, 46.41843476923827, 41.457633852235155, 38.48115330203329, 36.49683293523205, 35.079461244659726, 34.016432476730486], [81.7996, 53.52303477308226, 44.097513030776355, 39.384752159623396, 36.55709563693162, 34.671991288470444, 33.32548818242674, 32.31561085289397], [77.90438095238095, 50.97431883150692, 41.99763145788224, 37.50928777106991, 34.8162815589825, 33.020944084257565, 31.738560173739756, 30.776772240851397], [74.36327272727272, 48.65730433916569, 40.08864820979669, 35.80432014511218, 33.23372330630148, 31.519992080427677, 30.295898347660675, 29.377828048085423], [204.49899999999997, 133.80758693270565, 110.24378257694089, 98.4618803990585, 91.39273909232907, 86.67997822117611, 83.31372045606686, 80.78902713223492], [181.7768888888889, 118.94007727351615, 97.99447340172523, 87.52167146582978, 81.23799030429251, 77.04886952993432, 74.05664040539277, 71.81246856198659]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}