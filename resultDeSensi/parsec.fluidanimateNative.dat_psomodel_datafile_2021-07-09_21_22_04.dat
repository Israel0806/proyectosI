{"config": {"pkg": "parsec.fluidanimate", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "deSensi.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_21:22:04", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\n# values [B]\ndef _func_speedup(param, freq, cores, f_min, min_exec_time):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :param B1: T(1, f_min) * B\n    :param B2: T(1, f_min) * (1 - B)\n    :return: calculated speedup value\n    :return: B1 * f_min / f + B2 * f_min / (f * t)\n    \"\"\"\n    B1 = min_exec_time * param[0]\n    B2 = min_exec_time * (1 - param[0])\n    return B1 * f_min / freq + B2 * f_min / (freq * cores)\n\n\ndef model(par, x_meas, f_min, min_exec_time):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x_meas:\n        y_model = _func_speedup(par, f, p, f_min, min_exec_time)\n        pred.append(y_model)\n    return {'x': x_meas, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    # print(pred)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0]", "uppervalues": "[1]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_deSensi.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.fluidanimateNative.dat", "verbosity": 1}, "measuresfraction": 4, "measuresfraction_points": [[1200000, 4], [2200000, 2]]}, "data": {"params": "[0.5132754688062381]", "error": 11547.082045347639, "errorrel": 18.630222082712734, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.fluidanimate", "execdate": "27-06-2021_13:13:44", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[715.581, 386.855, 0.004, 309.102, 0.004, 0.004, 0.004, 241.607], [711.111, 384.068, 0.004, 311.207, 0.004, 0.004, 0.004, 242.062], [706.591, 381.458, 0.004, 294.423, 0.004, 0.004, 0.004, 233.144], [661.587, 351.814, 0.003, 275.48, 0.003, 0.003, 0.003, 216.803], [614.252, 326.95, 0.003, 263.766, 0.003, 0.003, 0.003, 202.444], [573.817, 305.681, 0.003, 241.219, 0.003, 0.003, 0.003, 190.355], [507.22, 270.901, 0.002, 212.539, 0.003, 0.002, 0.002, 171.068], [479.532, 256.86, 0.002, 203.375, 0.002, 0.002, 0.002, 163.139], [455.072, 243.229, 0.002, 198.049, 0.002, 0.002, 0.002, 155.921], [432.544, 231.483, 0.002, 186.69, 0.002, 0.002, 0.002, 149.508], [412.646, 220.702, 0.002, 177.428, 0.002, 0.002, 0.002, 144.482], [394.343, 211.495, 0.002, 170.459, 0.002, 0.002, 0.002, 140.113], [246.695, 150.204, 0.001, 127.079, 0.001, 0.001, 0.001, 110.448], [246.443, 150.002, 0.001, 128.113, 0.001, 0.001, 0.001, 110.548], [709.518, 211.652, 0.002, 168.409, 0.002, 0.002, 0.002, 137.004], [709.391, 385.584, 0.004, 309.015, 0.003, 0.004, 0.004, 239.788]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[567.6144000000002, 429.4784736305859, 383.4331648407811, 360.41051044587874, 346.5969178089373, 337.3878560509763, 330.80995479528997, 325.87652885352514], [516.013090909091, 390.4349760278053, 348.57560440071006, 327.64591858716244, 315.0881070990339, 306.7162327736149, 300.7363225411727, 296.25138986684107], [473.01200000000006, 357.89872802548814, 319.52763736731754, 300.34209203823224, 288.83076484078106, 281.15654670914694, 275.6749623294083, 271.56377404460426], [436.6264615384616, 330.3680566389122, 294.9485883390624, 277.23885418913744, 266.61301369918255, 259.52912003921256, 254.46919599637687, 250.67425296425012], [405.43885714285716, 306.7703383075613, 273.88083202912935, 257.43607888991335, 247.56922700638376, 240.99132575069737, 236.29282485377854, 232.7689491810894], [378.40960000000007, 286.3189824203905, 255.62210989385403, 240.2736736305858, 231.06461187262482, 224.92523736731755, 220.5399698635266, 217.25101923568343], [333.8908235294118, 252.6343962532858, 225.5489204945771, 212.00618261522277, 203.88053988761015, 198.46344473586842, 194.5940910560529, 191.69207579619126], [315.3413333333334, 238.59915201699215, 213.01842491154505, 200.22806135882152, 192.5538432271874, 187.43769780609796, 183.78330821960554, 181.0425160297362], [298.74442105263165, 226.04130191083465, 201.806928863569, 189.68974233993617, 182.41943042575645, 177.57255581630332, 174.1105025238368, 171.5139625544869], [283.8072000000001, 214.73923681529294, 191.71658242039055, 180.20525522293937, 173.29845890446865, 168.69392802548816, 165.40497739764498, 162.93826442676257], [270.2925714285715, 204.51355887170752, 182.5872213527529, 171.62405259327556, 165.04615133758918, 160.66088383379827, 157.52854990251902, 155.1792994540596], [258.0065454545455, 195.21748801390265, 174.28780220035503, 163.82295929358122, 157.54405354951695, 153.35811638680744, 150.36816127058634, 148.12569493342053], [246.7888695652174, 186.72977114373296, 166.7100716699048, 156.70022193299073, 150.6943120908423, 146.69037219607665, 143.83041512838693, 141.6854473276196], [246.6816166883964, 186.64861957000687, 166.6376205305437, 156.6321210108121, 150.62882129897318, 146.62662149108053, 143.7679073425858, 141.62387173121473], [709.518, 536.8480920382323, 479.2914560509763, 450.5131380573483, 433.2461472611716, 421.73482006372035, 413.5124434941124, 407.3456610669064], [630.6826666666668, 477.1983040339843, 426.0368498230901, 400.45612271764304, 385.1076864543748, 374.8753956121959, 367.5666164392111, 362.0850320594724]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}