{"config": {"pkg": "parsec.vips", "command": "runprocess.py -p parsec.vips -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "deSensi.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_19:04:07", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\n# values [B]\ndef _func_speedup(param, freq, cores, f_min, min_exec_time):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :param B1: T(1, f_min) * B\n    :param B2: T(1, f_min) * (1 - B)\n    :return: calculated speedup value\n    :return: B1 * f_min / f + B2 * f_min / (f * t)\n    \"\"\"\n    B1 = min_exec_time * param[0]\n    B2 = min_exec_time * (1 - param[0])\n    return B1 * f_min / freq + B2 * f_min / (freq * cores)\n\n\ndef model(par, x_meas, f_min, min_exec_time):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x_meas:\n        y_model = _func_speedup(par, f, p, f_min, min_exec_time)\n        pred.append(y_model)\n    return {'x': x_meas, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    # print(pred)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0]", "uppervalues": "[1]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_deSensi.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.vipsNative.dat", "verbosity": 1}, "measuresfraction": 4, "measuresfraction_points": [[1200000, 4], [1300000, 6], [1700000, 3], [2100000, 2]]}, "data": {"params": "[0.30863802889170533]", "error": 393.2471676716384, "errorrel": 3.1913969624888616, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.vips", "execdate": "03-07-2021_12:21:39", "command": "runprocess.py -p parsec.vips -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[205.122, 107.922, 75.25, 69.996, 68.08500000000001, 59.232, 56.776, 55.525], [205.029, 105.17099999999999, 75.42699999999999, 70.174, 64.53, 58.002, 55.27, 55.291], [205.852, 103.953, 69.907, 65.542, 64.475, 56.164, 54.898, 53.293], [191.356, 96.027, 64.482, 59.989, 53.46, 51.865, 50.263, 49.526], [177.24, 89.17099999999999, 59.976, 57.39, 50.59, 48.14, 46.685, 45.816], [165.29399999999998, 83.06700000000001, 56.388, 53.865, 49.012, 44.886, 43.652, 42.815], [145.65, 74.24, 49.287, 43.393, 40.897, 39.653, 38.343, 37.834], [137.501, 69.16, 46.518, 42.95, 42.934, 37.49, 36.482, 35.956], [130.512, 65.611, 44.647, 42.249, 40.645, 35.866, 34.541, 33.684], [124.012, 62.457, 41.788, 40.268, 35.362, 34.084, 32.639, 32.046], [117.932, 59.48, 40.291, 35.206, 36.89, 32.066, 31.02, 30.727], [112.94800000000001, 56.474, 38.086, 36.502, 32.219, 30.968, 30.748, 30.056], [204.499, 106.384, 75.669, 70.389, 63.686, 62.897, 57.027, 55.08], [204.847, 107.10499999999999, 75.31700000000001, 71.233, 63.146, 58.754, 55.326, 54.583]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[163.5992, 107.04606730812995, 88.19502307750659, 78.76950096219491, 73.1141876930079, 69.34397884688323, 66.65097252822275, 64.63121778922739], [148.72654545454546, 97.3146066437545, 80.17729370682417, 71.60863723835901, 66.46744335727992, 63.03998076989385, 60.591793207475234, 58.75565253566127], [136.33266666666668, 89.20505609010829, 73.49585256458882, 65.64125080182909, 60.92848974417325, 57.78664903906936, 55.54247710685229, 53.859348157689496], [125.84553846153847, 82.3431286985615, 67.84232544423584, 60.59192381707301, 56.24168284077531, 53.34152218991018, 51.269978867863664, 49.71632137632877], [116.85657142857144, 76.46147664866425, 62.996445055361846, 56.26392925871065, 52.22441978071993, 49.53141346205945, 47.60783752015911, 46.165155563733855], [109.06613333333334, 71.36404487208662, 58.796682051671056, 52.51300064146328, 48.742791795338604, 46.22931923125549, 44.43398168548184, 43.0874785261516], [96.23482352941178, 62.968274887135266, 51.879425339709755, 46.33500056599701, 43.00834570176936, 40.79057579228426, 39.20645442836633, 38.018363405427884], [90.88844444444445, 59.47003739340552, 48.99723504305922, 43.76083386788606, 40.61899316278217, 38.52443269271291, 37.028318071234864, 35.90623210512633], [86.10484210526316, 56.34003542533155, 46.41843319868768, 41.457632085365745, 38.48115141737258, 36.49683097204381, 35.0794592253804, 34.01643041538284], [81.7996, 53.523033654064974, 44.097511538753295, 39.384750481097456, 36.55709384650395, 34.671989423441616, 33.325486264111376, 32.315608894613696], [77.90438095238096, 50.97431776577616, 41.9976300369079, 37.509286172473765, 34.81627985381329, 33.020942308039636, 31.73855834677274, 30.776770375822572], [74.36327272727273, 48.65730332187725, 40.08864685341209, 35.804318619179504, 33.23372167863996, 31.519990384946926, 30.295896603737617, 29.377826267830635], [204.49900000000002, 133.80758413516241, 110.24377884688323, 98.46187620274364, 91.39273461625987, 86.67997355860405, 83.31371566027845, 80.78902223653424], [181.7768888888889, 118.94007478681104, 97.99447008611844, 87.52166773577213, 81.23798632556434, 77.04886538542581, 74.05663614246973, 71.81246421025266]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}