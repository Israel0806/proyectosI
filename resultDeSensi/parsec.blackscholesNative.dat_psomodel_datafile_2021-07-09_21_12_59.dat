{"config": {"pkg": "parsec.blackscholes", "command": "runprocess.py -p parsec.blackscholes -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "deSensi.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_21:12:59", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\n# values [B]\ndef _func_speedup(param, freq, cores, f_min, min_exec_time):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :param B1: T(1, f_min) * B\n    :param B2: T(1, f_min) * (1 - B)\n    :return: calculated speedup value\n    :return: B1 * f_min / f + B2 * f_min / (f * t)\n    \"\"\"\n    B1 = min_exec_time * param[0]\n    B2 = min_exec_time * (1 - param[0])\n    return B1 * f_min / freq + B2 * f_min / (freq * cores)\n\n\ndef model(par, x_meas, f_min, min_exec_time):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x_meas:\n        y_model = _func_speedup(par, f, p, f_min, min_exec_time)\n        pred.append(y_model)\n    return {'x': x_meas, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    # print(pred)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0]", "uppervalues": "[1]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_deSensi.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.blackscholesNative.dat", "verbosity": 1}, "measuresfraction": 4, "measuresfraction_points": [[1200000, 4], [1300000, 6], [1700000, 3], [2100000, 2]]}, "data": {"params": "[0.29105254471286696]", "error": 242.33752464872015, "errorrel": 6.802256722123174, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.blackscholes", "execdate": "20-06-2021_20:42:40", "command": "runprocess.py -p parsec.blackscholes -i native -f 2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[148.896, 76.263, 54.008, 51.1, 43.295, 38.007, 33.821, 31.505], [150.53, 76.386, 53.838, 50.253, 41.496, 36.944, 33.348, 31.204], [150.164, 76.33, 50.901, 49.465, 40.592, 36.363, 32.266, 30.59], [140.718, 70.431, 46.958, 46.731, 37.496, 33.541, 29.556, 28.711], [130.764, 65.373, 43.614, 42.472, 35.137, 31.33, 27.489, 26.596], [121.891, 61.08, 40.793, 39.927, 33.766, 29.191, 25.744, 24.884], [107.598, 53.857, 35.905, 35.179, 28.987, 25.561, 22.625, 22.095], [101.69, 50.818, 33.946, 33.476, 27.494, 23.991, 21.452, 20.904], [96.37, 48.226, 32.162, 31.644, 25.985, 23.22, 20.293, 19.801], [91.514, 45.846, 30.591, 29.752, 25.335, 21.917, 19.345, 18.818], [87.194, 43.652, 29.111, 29.085, 23.524, 20.575, 18.423, 17.937], [83.223, 41.673, 27.765, 27.749, 22.273, 20.013, 17.571, 17.03], [150.053, 76.367, 51.304, 52.057, 43.319, 36.085, 32.297, 30.974], [150.721, 76.342, 52.636, 52.624, 42.93, 37.684, 32.527, 31.032]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[120.04240000000001, 77.49052299671993, 63.306563995626576, 56.214584495079905, 51.959396794751896, 49.12260499453322, 47.09632513723417, 45.576615244259884], [109.12945454545455, 70.44592999701813, 57.55142181420598, 51.10416772279991, 47.23581526795626, 44.656913631393834, 42.81484103384924, 41.4332865856908], [100.03533333333334, 64.57543583059994, 52.75546999635548, 46.84548707923325, 43.29949732895991, 40.935504162111016, 39.246937614361805, 37.9805127035499], [92.3403076923077, 59.60809461286149, 48.69735691971275, 43.24198807313839, 39.96876676519376, 37.786619226564014, 36.227942413257054, 35.05893480327683], [85.74457142857143, 55.35037356908567, 45.21897428259041, 40.15327463934278, 37.11385485339421, 35.08757499609516, 33.640232240881545, 32.55472517447134], [80.02826666666667, 51.660348664479955, 42.204375997084384, 37.4763896633866, 34.63959786316793, 32.74840332968881, 31.397550091489446, 30.38441016283992], [70.61317647058824, 45.58266058630585, 37.239155291545046, 33.067402644164645, 30.564351055736406, 28.895649996784247, 27.703720668961274, 26.809773673094046], [66.69022222222223, 43.0502905537333, 35.17031333090365, 31.230324719488834, 28.86633155263994, 27.29033610807401, 26.164625076241204, 25.3203418023666], [63.1802105263158, 40.784485787747336, 33.31924420822452, 29.586623418463105, 27.34705094460626, 25.854002628701693, 24.787539545912722, 23.98769223382099], [60.02120000000001, 38.745261498359966, 31.653281997813288, 28.107292247539952, 25.979698397375948, 24.56130249726661, 23.548162568617084, 22.788307622129942], [57.163047619047624, 36.90024904605711, 30.145982855060275, 26.768849759561856, 24.742569902262805, 23.391716664063438, 22.426821493921032, 21.703150116314227], [54.564727272727275, 35.22296499850906, 28.77571090710299, 25.552083861399954, 23.61790763397813, 22.328456815696917, 21.40742051692462, 20.7166432928454], [150.053, 96.86315374589992, 79.13320499453323, 70.26823061884987, 64.94924599343986, 61.403256243166524, 58.87040642154271, 56.97076905532485], [133.38044444444446, 86.1005811074666, 70.3406266618073, 62.46064943897767, 57.73266310527988, 54.58067221614802, 52.32925015248241, 50.6406836047332]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}