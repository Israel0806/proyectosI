{"config": {"pkg": "parsec.fluidanimate", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "deSensi.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_20:45:54", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\n# values [B]\ndef _func_speedup(param, freq, cores, f_min, min_exec_time):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :param B1: T(1, f_min) * B\n    :param B2: T(1, f_min) * (1 - B)\n    :return: calculated speedup value\n    :return: B1 * f_min / f + B2 * f_min / (f * t)\n    \"\"\"\n    B1 = min_exec_time * param[0]\n    B2 = min_exec_time * (1 - param[0])\n    return B1 * f_min / freq + B2 * f_min / (freq * cores)\n\n\ndef model(par, x_meas, f_min, min_exec_time):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x_meas:\n        y_model = _func_speedup(par, f, p, f_min, min_exec_time)\n        pred.append(y_model)\n    return {'x': x_meas, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    # print(pred)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0]", "uppervalues": "[1]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_deSensi.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.fluidanimateNative.dat", "verbosity": 1}, "measuresfraction": 4, "measuresfraction_points": [[1200000, 4], [1400000, 6], [1900000, 3], [2200000, 2]]}, "data": {"params": "[0.10285433066329444]", "error": 14800.861317336035, "errorrel": 143370189548.11826, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.fluidanimate", "execdate": "27-06-2021_13:13:44", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[715.581, 386.855, 0.004, 309.102, 0.004, 0.004, 0.004, 241.607], [711.111, 384.068, 0.004, 311.207, 0.004, 0.004, 0.004, 242.062], [706.591, 381.458, 0.004, 294.423, 0.004, 0.004, 0.004, 233.144], [661.587, 351.814, 0.003, 275.48, 0.003, 0.003, 0.003, 216.803], [614.252, 326.95, 0.003, 263.766, 0.003, 0.003, 0.003, 202.444], [573.817, 305.681, 0.003, 241.219, 0.003, 0.003, 0.003, 190.355], [507.22, 270.901, 0.002, 212.539, 0.003, 0.002, 0.002, 171.068], [479.532, 256.86, 0.002, 203.375, 0.002, 0.002, 0.002, 163.139], [455.072, 243.229, 0.002, 198.049, 0.002, 0.002, 0.002, 155.921], [432.544, 231.483, 0.002, 186.69, 0.002, 0.002, 0.002, 149.508], [412.646, 220.702, 0.002, 177.428, 0.002, 0.002, 0.002, 144.482], [394.343, 211.495, 0.002, 170.459, 0.002, 0.002, 0.002, 140.113], [246.695, 150.204, 0.001, 127.079, 0.001, 0.001, 0.001, 110.448], [246.443, 150.002, 0.001, 128.113, 0.001, 0.001, 0.001, 110.548], [709.518, 211.652, 0.002, 168.409, 0.002, 0.002, 0.002, 137.004], [709.391, 385.584, 0.004, 309.015, 0.003, 0.004, 0.004, 239.788]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[567.6143999999999, 312.99799959342374, 228.125866124565, 185.68979939013562, 160.22815934947798, 143.25373265570624, 131.129142160155, 122.03569928849154], [516.0130909090909, 284.5436359940216, 207.3871510223318, 168.8089085364869, 145.66196304497998, 130.23066605064204, 119.20831105468633, 110.9415448077196], [473.012, 260.8316663278531, 190.1048884371375, 154.74149949177968, 133.523466124565, 119.37811054642187, 109.27428513346248, 101.69641607374297], [436.6264615384615, 240.76769199494134, 175.4814354804346, 142.83830722318123, 123.25243026882922, 110.19517896592788, 100.8685708924269, 93.87361483730119], [405.4388571428571, 223.5699997095884, 162.94704723183213, 132.635570992954, 114.44868524962713, 102.32409475407587, 93.66367297153927, 87.16835663463681], [378.40959999999995, 208.66533306228249, 152.08391074971, 123.79319959342374, 106.81877289965199, 95.50248843713749, 87.41942810676998, 81.35713285899436], [333.89082352941176, 184.11647034907278, 134.19168595562647, 109.22929375890331, 94.2518584408694, 84.26690156218014, 77.13478950597352, 71.78570546381856], [315.3413333333333, 173.88777755190208, 126.736592291425, 103.16099966118645, 89.01564408304333, 79.58540703094792, 72.84952342230832, 67.79761071582864], [298.74442105263154, 164.7357892596967, 120.06624532871841, 97.73147336322927, 84.33061018393578, 75.39670139774012, 69.01533797902894, 64.22931541499555], [283.80719999999997, 156.49899979671187, 114.0629330622825, 92.84489969506781, 80.11407967473899, 71.62686632785312, 65.5645710800775, 61.01784964424577], [270.2925714285714, 149.04666647305893, 108.63136482122142, 88.42371399530268, 76.29912349975142, 68.21606316938393, 62.442448647692856, 58.11223775642455], [258.00654545454546, 142.2718179970108, 103.6935755111659, 84.40445426824346, 72.83098152248999, 65.11533302532102, 59.60415552734317, 55.4707724038598], [246.78886956521737, 136.08608677974945, 99.18515918459347, 80.73469538701548, 69.66441710846868, 62.284231589437496, 57.01267050441521, 53.0589996906485], [246.68161668839633, 136.02694462991036, 99.14205394374837, 80.69960860066737, 69.63414139481877, 62.25716325758637, 56.98789315956323, 53.03594058604587], [709.518, 391.24749949177965, 285.1573326557062, 232.11224923766952, 200.28519918684748, 179.0671658196328, 163.9114277001937, 152.54462411061445], [630.6826666666666, 347.77555510380415, 253.47318458285, 206.3219993223729, 178.03128816608665, 159.17081406189584, 145.69904684461665, 135.59522143165728]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}