{"config": {"pkg": "parsec.fluidanimate", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "deSensi.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_20:14:40", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\n# values [B]\ndef _func_speedup(param, freq, cores, f_min, min_exec_time):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :param B1: T(1, f_min) * B\n    :param B2: T(1, f_min) * (1 - B)\n    :return: calculated speedup value\n    :return: B1 * f_min / f + B2 * f_min / (f * t)\n    \"\"\"\n    B1 = min_exec_time * param[0]\n    B2 = min_exec_time * (1 - param[0])\n    return B1 * f_min / freq + B2 * f_min / (freq * cores)\n\n\ndef model(par, x_meas, f_min, min_exec_time):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x_meas:\n        y_model = _func_speedup(par, f, p, f_min, min_exec_time)\n        pred.append(y_model)\n    return {'x': x_meas, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    # print(pred)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0]", "uppervalues": "[1]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_deSensi.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.fluidanimateNative.dat", "verbosity": 1}, "measuresfraction": 4, "measuresfraction_points": [[1200000, 4], [1400000, 6], [1900000, 3], [2200000, 2]]}, "data": {"params": "[0.10285410410753323]", "error": 14800.855937318096, "errorrel": 143370025143.5068, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.fluidanimate", "execdate": "27-06-2021_13:13:44", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[715.581, 386.855, 0.004, 309.102, 0.004, 0.004, 0.004, 241.607], [711.111, 384.068, 0.004, 311.207, 0.004, 0.004, 0.004, 242.062], [706.591, 381.458, 0.004, 294.423, 0.004, 0.004, 0.004, 233.144], [661.587, 351.814, 0.003, 275.48, 0.003, 0.003, 0.003, 216.803], [614.252, 326.95, 0.003, 263.766, 0.003, 0.003, 0.003, 202.444], [573.817, 305.681, 0.003, 241.219, 0.003, 0.003, 0.003, 190.355], [507.22, 270.901, 0.002, 212.539, 0.003, 0.002, 0.002, 171.068], [479.532, 256.86, 0.002, 203.375, 0.002, 0.002, 0.002, 163.139], [455.072, 243.229, 0.002, 198.049, 0.002, 0.002, 0.002, 155.921], [432.544, 231.483, 0.002, 186.69, 0.002, 0.002, 0.002, 149.508], [412.646, 220.702, 0.002, 177.428, 0.002, 0.002, 0.002, 144.482], [394.343, 211.495, 0.002, 170.459, 0.002, 0.002, 0.002, 140.113], [246.695, 150.204, 0.001, 127.079, 0.001, 0.001, 0.001, 110.448], [246.443, 150.002, 0.001, 128.113, 0.001, 0.001, 0.001, 110.548], [709.518, 211.652, 0.002, 168.409, 0.002, 0.002, 0.002, 137.004], [709.391, 385.584, 0.004, 309.015, 0.003, 0.004, 0.004, 239.788]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[567.6144, 312.9979352952675, 228.12578039369004, 185.68970294290125, 160.22805647242802, 143.25362549211252, 131.12903193474432, 122.03558676671814], [516.0130909090909, 284.5435775411523, 207.38707308517274, 168.80882085718298, 145.6618695203891, 130.2305686291932, 119.20821084976754, 110.9414425151983], [473.01200000000006, 260.8316127460563, 190.10481699474167, 154.74141911908438, 133.52338039369002, 119.3780212434271, 109.27419327895359, 101.69632230559844], [436.6264615384615, 240.76764253482116, 175.4813695336077, 142.83823303300096, 123.25235113263693, 110.19509653239425, 100.86848610364946, 93.87352828209087], [405.43885714285716, 223.56995378233393, 162.94698599549287, 132.63550210207234, 114.44861176602001, 102.32401820865181, 93.66359423910308, 87.16827626194153], [378.4096, 208.665290196845, 152.08385359579336, 123.79313529526752, 106.81870431495202, 95.50241699474168, 87.41935462316286, 81.35705784447876], [333.89082352941176, 184.11643252662796, 134.1916355257, 109.22923702523605, 94.25179792495766, 84.26683852477207, 77.13472466749664, 71.78563927454007], [315.34133333333335, 173.88774183070416, 126.73654466316113, 103.16094607938959, 89.01558692912667, 79.58534749561807, 72.84946218596906, 67.7975482037323], [298.7444210526316, 164.73575541856184, 120.06620020720527, 97.73142260152697, 84.33055603812001, 75.39664499584869, 69.0152799656549, 64.22925619300955], [283.8072, 156.49896764763375, 114.06289019684502, 92.84485147145062, 80.11402823621401, 71.62681274605626, 65.56451596737216, 61.01779338335907], [270.2925714285714, 149.0466358548893, 108.63132399699523, 88.42366806804822, 76.29907451068001, 68.2160121391012, 62.44239615940205, 58.112184174627686], [258.00654545454546, 142.27178877057614, 103.69353654258637, 84.40441042859149, 72.83093476019455, 65.1152843145966, 59.60410542488377, 55.47072125759915], [246.7888695652174, 136.08605882402935, 99.18512191030001, 80.73465345343533, 69.66437237931653, 62.28418499657066, 57.01262258032361, 53.058950768138324], [246.68161668839636, 136.02691668633963, 99.14201668565408, 80.69956668531128, 69.63409668510562, 62.2571166849685, 56.98784525629913, 53.03589168479711], [709.518, 391.2474191190844, 285.1572254921125, 232.1121286786266, 200.285070590535, 179.06703186514065, 163.91128991843038, 152.54448345839768], [630.6826666666667, 347.7754836614083, 253.47308932632225, 206.32189215877918, 178.03117385825334, 159.17069499123613, 145.69892437193812, 135.5950964074646]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}