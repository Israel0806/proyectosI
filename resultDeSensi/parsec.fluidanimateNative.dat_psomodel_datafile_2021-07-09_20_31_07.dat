{"config": {"pkg": "parsec.fluidanimate", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "deSensi.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_20:31:07", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\n# values [B]\ndef _func_speedup(param, freq, cores, f_min, min_exec_time):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :param B1: T(1, f_min) * B\n    :param B2: T(1, f_min) * (1 - B)\n    :return: calculated speedup value\n    :return: B1 * f_min / f + B2 * f_min / (f * t)\n    \"\"\"\n    B1 = min_exec_time * param[0]\n    B2 = min_exec_time * (1 - param[0])\n    return B1 * f_min / freq + B2 * f_min / (freq * cores)\n\n\ndef model(par, x_meas, f_min, min_exec_time):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x_meas:\n        y_model = _func_speedup(par, f, p, f_min, min_exec_time)\n        pred.append(y_model)\n    return {'x': x_meas, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    # print(pred)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0]", "uppervalues": "[1]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_deSensi.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.fluidanimateNative.dat", "verbosity": 1}, "measuresfraction": 4, "measuresfraction_points": [[1200000, 4], [1400000, 6], [1900000, 3], [2200000, 2]]}, "data": {"params": "[0.10285474981942308]", "error": 14800.871271058268, "errorrel": 143370493717.2213, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.fluidanimate", "execdate": "27-06-2021_13:13:44", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[715.581, 386.855, 0.004, 309.102, 0.004, 0.004, 0.004, 241.607], [711.111, 384.068, 0.004, 311.207, 0.004, 0.004, 0.004, 242.062], [706.591, 381.458, 0.004, 294.423, 0.004, 0.004, 0.004, 233.144], [661.587, 351.814, 0.003, 275.48, 0.003, 0.003, 0.003, 216.803], [614.252, 326.95, 0.003, 263.766, 0.003, 0.003, 0.003, 202.444], [573.817, 305.681, 0.003, 241.219, 0.003, 0.003, 0.003, 190.355], [507.22, 270.901, 0.002, 212.539, 0.003, 0.002, 0.002, 171.068], [479.532, 256.86, 0.002, 203.375, 0.002, 0.002, 0.002, 163.139], [455.072, 243.229, 0.002, 198.049, 0.002, 0.002, 0.002, 155.921], [432.544, 231.483, 0.002, 186.69, 0.002, 0.002, 0.002, 149.508], [412.646, 220.702, 0.002, 177.428, 0.002, 0.002, 0.002, 144.482], [394.343, 211.495, 0.002, 170.459, 0.002, 0.002, 0.002, 140.113], [246.695, 150.204, 0.001, 127.079, 0.001, 0.001, 0.001, 110.448], [246.443, 150.002, 0.001, 128.113, 0.001, 0.001, 0.001, 110.548], [709.518, 211.652, 0.002, 168.409, 0.002, 0.002, 0.002, 137.004], [709.391, 385.584, 0.004, 309.015, 0.003, 0.004, 0.004, 239.788]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[567.6144, 312.99811855295104, 228.12602473726798, 185.68997782942648, 160.2283496847216, 143.25393092158498, 131.1293460907731, 122.03590746766422], [516.0130909090909, 284.54374413904634, 207.38729521569815, 168.80907075402405, 145.66213607701962, 130.23084629234995, 119.20849644615737, 110.94173406151292], [473.012, 260.8317654607925, 190.10502061438999, 154.74164819118872, 133.52362473726797, 119.37827576798747, 109.27445507564425, 101.69658955638684], [436.62646153846157, 240.76778350227, 175.48155749020614, 142.8384444841742, 123.25257668055505, 110.1953314781423, 100.86872776213316, 93.87377497512631], [405.4388571428572, 223.5700846806793, 162.94716052662, 132.63569844959034, 114.44882120337255, 102.32423637256069, 93.66381863626651, 87.16850533404588], [378.4096, 208.665412368634, 152.084016491512, 123.79331855295098, 106.81889978981438, 95.50262061438997, 87.4195640605154, 81.35727164510948], [333.8908235294118, 184.1165403252653, 134.19177925721647, 109.22939872319205, 94.25197040277739, 84.26701818916763, 77.13490946516065, 71.78582792215542], [315.34133333333335, 173.88784364052833, 126.73668040959333, 103.16109879412582, 89.01574982484532, 79.5855171786583, 72.84963671709616, 67.79772637092455], [298.7444210526316, 164.73585186997423, 120.06632880908842, 97.73156727864551, 84.33071036037978, 75.39680574820261, 69.01544531093322, 64.22942498298116], [283.8072, 156.49905927647552, 114.06301236863399, 92.84498891471324, 80.1141748423608, 71.62696546079249, 65.56467304538656, 61.01795373383211], [270.2925714285715, 149.04672312045287, 108.63144035107999, 88.42379896639356, 76.29921413558169, 68.21615758170712, 62.442545757511, 58.11233688936391], [258.00654545454546, 142.27187206952317, 103.69364760784907, 84.40453537701202, 72.83106803850981, 65.11542314617498, 59.604248223078685, 55.47086703075646], [246.7888695652174, 136.08613850128305, 99.18522814663825, 80.73477296931586, 69.66449986292241, 62.284317791993466, 57.01275916990135, 53.05909020333226], [246.68161668839636, 136.0269963289661, 99.14212287582268, 80.69968614925097, 69.63422411330794, 62.25724942267925, 56.98798178651591, 53.036031059393395], [709.518, 391.2476481911888, 285.15753092158496, 232.1124722867831, 200.28543710590196, 179.0674136519812, 163.91168261346638, 152.54488433458027], [630.6826666666667, 347.77568728105666, 253.47336081918667, 206.32219758825164, 178.03149964969063, 159.1710343573166, 145.69927343419232, 135.5954527418491]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}