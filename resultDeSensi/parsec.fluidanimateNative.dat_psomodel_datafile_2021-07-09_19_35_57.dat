{"config": {"pkg": "parsec.fluidanimate", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "modelcommand": "deSensi.py", "hostname": "AsusLaptop", "savedate": "2021-07-09_19:35:57", "modelcodesource": "# -*- coding: utf-8 -*-\n\"\"\"\n    Model function example to use with parsecpy runmodel script.\n    Model for variation of input size (n) and number of cores (p).\n\n    Speedup:\n        S = 1 / ( ( 1-f(p,n) ) + f(p,n)/p + Q(p,n) )\n\n    Parallel Fraction:\n        f(p,n) = max( min((f1) + (f2)/p + (f3)*(f4)^n,1 ),0 )\n\n    Overhead:\n        Q(p,n) = (f5) + ( (f6)*p )/( (f7)^n )\n\n\"\"\"\n\nimport numpy as np\nfrom numpy.lib import math\nfrom sklearn.metrics import mean_squared_error\n\n# values [B]\ndef _func_speedup(param, freq, cores, f_min, min_exec_time):\n    \"\"\"\n    Model function to calculate the speedup without overhead.\n\n    :param fparam: Actual parameters values\n    :param p: Numbers of cores used on model data\n    :param n: Problems size used on model data\n    :param B1: T(1, f_min) * B\n    :param B2: T(1, f_min) * (1 - B)\n    :return: calculated speedup value\n    :return: B1 * f_min / f + B2 * f_min / (f * t)\n    \"\"\"\n    B1 = min_exec_time * param[0]\n    B2 = min_exec_time * (1 - param[0])\n    return B1 * f_min / freq + B2 * f_min / (freq * cores)\n\n\ndef model(par, x_meas, f_min, min_exec_time):\n    \"\"\"\n    Mathematical Model function to predict the measures values.\n\n    :param par: Actual parameters values\n    :param x: inputs array\n    :param overhead: If should be considered the overhead\n    :return: Dict with input array ('x') and predicted output array ('y')\n    \"\"\"\n    pred = []\n    for f, p in x_meas:\n        y_model = _func_speedup(par, f, p, f_min, min_exec_time)\n        pred.append(y_model)\n    return {'x': x_meas, 'y': pred}\n\ndef constraint_function(par, x_meas, **kwargs):\n    \"\"\"\n    Constraint function that would be considered on model.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: If parameters are acceptable based on return functions\n    \"\"\"\n\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    # print(pred)\n    y = pred['y']\n    # x_meas es el training_size\n    # pred es la prediccion del algoritmo\n    is_feasable = np.min(y) > 1\n    return is_feasable\n\n\n# Par: Particulas [f, m1, m2 k] 0-1 0-10\n# x_meas: frecuencia y cores a tomar en cuenta (ts)\n# y_meas: \ndef objective_function(par, x_meas, y_meas, **kwargs):\n    \"\"\"\n    Objective function (target function) to minimize.\n\n    :param par: Actual parameters values\n    :param args: Positional arguments passed for objective\n                 and constraint functions\n    :return: Mean squared error between measures and predicts\n    \"\"\"\n    pred = model(par, x_meas, kwargs['f_min'], kwargs['min_exec_time'])\n    return mean_squared_error(y_meas, pred['y'])", "modelexecparams": {"algorithm": "pso", "lowervalues": "[0]", "uppervalues": "[1]", "threads": 4, "size": 200, "w": 0.30557280900008416, "c1": 0.30557280900008416, "c2": 1.2222912360003366, "maxiter": 100, "modelcodefilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/examples/modelfunc_deSensi.py", "parsecpydatafilepath": "/media/israel/ExtraSpaceLinux/proyectosI/memoryWall/parsec.fluidanimateNative.dat", "verbosity": 1}, "measuresfraction": 4, "measuresfraction_points": [[1200000, 4], [1400000, 6], [1900000, 3], [2200000, 2]]}, "data": {"params": "[0.10285482152513596]", "error": 14800.872973860764, "errorrel": 143370545751.95453, "parsecdata": {"dims": ["frequency", "cores"], "attrs": {"pkg": "parsec.fluidanimate", "execdate": "27-06-2021_13:13:44", "command": "runprocess.py -p parsec.fluidanimate -i native -f 2301000,2300000,2200000,2100000,2000000,1900000,1800000,1700000,1500000,1400000,1300000,1200000,1100000,1000000,900000,800000 -r 3 1,2,3,4,5,6,7,8", "input_sizes": ["native"], "hostname": "AsusLaptop", "size": "static: 1"}, "data": [[715.581, 386.855, 0.004, 309.102, 0.004, 0.004, 0.004, 241.607], [711.111, 384.068, 0.004, 311.207, 0.004, 0.004, 0.004, 242.062], [706.591, 381.458, 0.004, 294.423, 0.004, 0.004, 0.004, 233.144], [661.587, 351.814, 0.003, 275.48, 0.003, 0.003, 0.003, 216.803], [614.252, 326.95, 0.003, 263.766, 0.003, 0.003, 0.003, 202.444], [573.817, 305.681, 0.003, 241.219, 0.003, 0.003, 0.003, 190.355], [507.22, 270.901, 0.002, 212.539, 0.003, 0.002, 0.002, 171.068], [479.532, 256.86, 0.002, 203.375, 0.002, 0.002, 0.002, 163.139], [455.072, 243.229, 0.002, 198.049, 0.002, 0.002, 0.002, 155.921], [432.544, 231.483, 0.002, 186.69, 0.002, 0.002, 0.002, 149.508], [412.646, 220.702, 0.002, 177.428, 0.002, 0.002, 0.002, 144.482], [394.343, 211.495, 0.002, 170.459, 0.002, 0.002, 0.002, 140.113], [246.695, 150.204, 0.001, 127.079, 0.001, 0.001, 0.001, 110.448], [246.443, 150.002, 0.001, 128.113, 0.001, 0.001, 0.001, 110.548], [709.518, 211.652, 0.002, 168.409, 0.002, 0.002, 0.002, 137.004], [709.391, 385.584, 0.004, 309.015, 0.003, 0.004, 0.004, 239.788]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000, 800000, 900000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}, "speedupmodel": {"dims": ["frequency", "cores"], "attrs": {}, "data": [[567.6144, 312.9981389035486, 228.1260518713981, 185.69000835532285, 160.22838224567772, 143.2539648392476, 131.12938097751183, 122.03594308121001], [516.0130909090909, 284.5437626395896, 207.3873198830892, 168.80909850483894, 145.66216567788882, 130.23087712658875, 119.2085281613744, 110.94176643746363], [473.012, 260.8317824196238, 190.10504322616507, 154.7416736294357, 133.5236518713981, 119.37830403270634, 109.27448414792653, 101.69661923434165], [436.62646153846157, 240.76779915657582, 175.4815783626139, 142.83846796563296, 123.25260172744439, 110.19535756865201, 100.86875459808601, 93.87380237016154], [405.43885714285716, 223.5700992168204, 162.9471799081415, 132.63572025380205, 114.44884446119835, 102.32426059946258, 93.66384355536559, 87.16853077229285], [378.4096, 208.66542593569903, 152.08403458093207, 123.79333890354857, 106.81892149711848, 95.50264322616508, 87.41958731834123, 81.35729538747333], [333.89082352941176, 184.11655229620504, 134.19179521846948, 109.22941667960168, 94.25198955628102, 84.26703814073389, 77.13492998677167, 71.7858488713], [315.3413333333333, 173.88785494641587, 126.73669548411004, 103.16111575295713, 89.0157679142654, 79.58553602180423, 72.84965609861769, 67.79774615622777], [298.7444210526316, 164.73586258081502, 120.06634309020953, 97.73158334490677, 84.3307274977251, 75.396823599604, 69.01546367237465, 64.22944372695262], [283.8072, 156.4990694517743, 114.06302593569905, 92.84500417766142, 80.11419112283886, 71.6269824196238, 65.56469048875591, 61.017971540605004], [270.2925714285714, 149.0467328112136, 108.63145327209433, 88.42381350253468, 76.29922964079891, 68.21617373297505, 62.442562370243735, 58.112353848195234], [258.00654545454546, 142.2718813197948, 103.6936599415446, 84.40454925241947, 72.83108283894441, 65.11543856329438, 59.6042640806872, 55.470883218731814], [246.7888695652174, 136.08614734936896, 99.18523994408612, 80.73478624144472, 69.66451401985988, 62.28433253880331, 57.01277433804862, 53.05910568748261], [246.68161668839636, 136.02700517320667, 99.14213466814346, 80.69969941561185, 69.63423826409289, 62.25726416308024, 56.9879969480712, 53.036046536814425], [709.518, 391.2476736294357, 285.1575648392476, 232.11251044415357, 200.28547780709715, 179.0674560490595, 163.9117262218898, 152.5449288515125], [630.6826666666666, 347.77570989283174, 253.4733909682201, 206.32223150591426, 178.0315358285308, 159.17107204360846, 145.69931219723537, 135.59549231245555]], "coords": {"frequency": {"dims": ["frequency"], "attrs": {}, "data": [800000, 900000, 1000000, 1100000, 1200000, 1300000, 1400000, 1500000, 1700000, 1800000, 1900000, 2000000, 2100000, 2200000, 2300000, 2301000]}, "cores": {"dims": ["cores"], "attrs": {}, "data": [1, 2, 3, 4, 5, 6, 7, 8]}}, "name": null}}}